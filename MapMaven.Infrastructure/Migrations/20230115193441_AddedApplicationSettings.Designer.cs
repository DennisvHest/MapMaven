// <auto-generated />
using System;
using MapMaven.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapMaven.Infrastructure.Migrations
{
    [DbContext(typeof(BSToolsContext))]
    [Migration("20230115193441_AddedApplicationSettings")]
    partial class AddedApplicationSettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("MapMaven.Core.Models.Data.ApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("MapMaven.Core.Models.Data.HiddenMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Difficulty")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("HiddenMaps");
                });

            modelBuilder.Entity("MapMaven.Core.Models.Data.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MapMaven.Models.Data.MapInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverImageFilename")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_coverImageFilename");

                    b.Property<string>("DirectoryPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LevelAuthorName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_levelAuthorName");

                    b.Property<float>("PreviewDurationInSeconds")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "_previewDuration");

                    b.Property<float>("PreviewStartTimeInSeconds")
                        .HasColumnType("REAL")
                        .HasAnnotation("Relational:JsonPropertyName", "_previewStartTime");

                    b.Property<string>("SongAuthorName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_songAuthorName");

                    b.Property<TimeSpan>("SongDuration")
                        .HasColumnType("TEXT");

                    b.Property<string>("SongFileName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_songFilename");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_songName");

                    b.HasKey("Id");

                    b.ToTable("MapInfos");
                });

            modelBuilder.Entity("MapMaven.Core.Models.Data.HiddenMap", b =>
                {
                    b.HasOne("MapMaven.Core.Models.Data.Player", "Player")
                        .WithMany("HiddenMaps")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MapMaven.Core.Models.Data.Player", b =>
                {
                    b.Navigation("HiddenMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
