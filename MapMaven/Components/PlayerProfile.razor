@inherits ReactiveComponent

@using MapMaven.Core.ApiClients.ScoreSaber;
@using MapMaven.Core.Models;
@using MapMaven.Core.Services;
@using MapMaven.Core.Services.Leaderboards;

@if (ScoreSaberProfile != null)
{
    <MudTabs MinimumTabWidth="20px" Position="Position.Left" ActivePanelIndex="ActivePanelIndex">
        <MudTabPanel Class="px-1" Style="min-height: 43px" OnClick="() => SetActiveLeaderboardProvider(LeaderboardProviders.ScoreSaber)">
            <TabContent>
                <img src="/images/score-saber-logo-small.png" style="width: 24px;" />
            </TabContent>
            <ChildContent>
                <PlayerProfileInfo Player="ScoreSaberProfile"></PlayerProfileInfo>
            </ChildContent>
        </MudTabPanel>
        <MudTabPanel Class="px-1" Style="min-height: 43px" OnClick="() => SetActiveLeaderboardProvider(LeaderboardProviders.BeatLeader)">
            <TabContent>
                <img src="/images/beat-leader-logo.svg" style="width: 24px;" />
            </TabContent>
            <ChildContent>
                <PlayerProfileInfo Player="BeatLeaderProfile"></PlayerProfileInfo>
            </ChildContent>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Inject]
    ILeaderboardService LeaderboardService { get; set; }

    [Inject]
    ScoreSaberService ScoreSaberService { get; set; }

    [Inject]
    BeatLeaderService BeatLeaderService { get; set; }

    [Inject]
    IMapService MapService { get; set; }

    Core.Models.PlayerProfile? ScoreSaberProfile { get; set; } = null;
    Core.Models.PlayerProfile? BeatLeaderProfile { get; set; } = null;

    int ActivePanelIndex { get; set; }

    protected override void OnInitialized()
    {
        SubscribeAndBind(LeaderboardService.ActiveLeaderboardProviderName, providerName =>
        {
            ActivePanelIndex = providerName switch
            {
                LeaderboardProviders.ScoreSaber => 0,
                LeaderboardProviders.BeatLeader => 1,
                _ => 0
            };
        });

        SubscribeAndBind(ScoreSaberService.PlayerProfile, player => ScoreSaberProfile = player);
        SubscribeAndBind(BeatLeaderService.PlayerProfile, player => BeatLeaderProfile = player);
    }

    void SetActiveLeaderboardProvider(string leaderboardProvider)
    {
        LeaderboardService.SetActiveLeaderboardProvider(leaderboardProvider);
    }

    void RefreshData()
    {
        Task.Run(() => MapService.RefreshDataAsync(forceRefresh: true));
    }
}
