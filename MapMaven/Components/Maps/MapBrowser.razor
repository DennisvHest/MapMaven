@inherits ReactiveComponent

@using MapMaven.Core.Utilities.Scoresaber
@using MapMaven.Core.Models.DynamicPlaylists

<div @ref="TableWrapperRef" @onkeydown="OnKeyDown" class="d-inline full-width" tabindex="-1" style="@(RankedMaps ? "width: calc(100% - var(--mud-drawer-width, var(--mud-drawer-width-left))); !important" : "")">
    <MudDataGrid @ref="TableRef"
                 T="Map"
                 Items="Maps"
                 Class="map-browser full-height full-width background-transparent d-flex flex-column"
                 Loading="LoadingMapInfo"
                 QuickFilter="Filter"
                 FixedHeader="true"
                 MultiSelection="true"
                 SortMode="MapSort is null ? SortMode.Single : SortMode.None"
                 SelectedItems="SelectedMaps"
                 SelectOnRowClick="false"
                 SelectedItemsChanged="OnSelectedItemsChanged"
                 RowClick="OnRowClick"
                 RowsPerPage="25"
                 Style="@Style"
                 RowStyle="height: 88px;"
                 RowClassFunc="RowClassFunc">
        <ToolBarContent>
            <MudGrid @onkeydown:stopPropagation="true">
                <MudItem xs="12" Class="d-flex align-center">
                    @if (SelectedPlaylist != null)
                    {
                        <MudChip T="string" Variant="Variant.Outlined">
                            @if (SelectedPlaylist.DynamicPlaylistConfiguration?.MapPool == MapPool.Improvement && SelectedPlaylist.DynamicPlaylistConfiguration?.LeaderboardProvider is not null)
                            {
                                <img src="@LeaderboardUtility.GetLogoPath(SelectedPlaylist.DynamicPlaylistConfiguration.LeaderboardProvider.Value)" class="mr-1" style="width: 24px;" />
                            }
                            @SelectedPlaylist.Title
                        </MudChip>
                    }
                    <MudTextField @bind-Value="SearchString"
                                  DebounceInterval="300"
                                  Immediate="true"
                                  Clearable="true"
                                  Placeholder="Search map name, song author, map author..."
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Small"
                                  Class="mt-0">
                    </MudTextField>
                    @if (!RankedMaps)
                    {
                        <MudTooltip Text="Advanced&nbsp;search">
                            <MudIconButton Icon="@Icons.Material.Filled.ManageSearch" Class="ml-5 mr-2" OnClick="OpenAdvancedSearch" />
                        </MudTooltip>
                        <MudTooltip Text="Bulk&nbsp;edit">
                            <MudIconButton Icon="@(Selectable ? Icons.Material.Filled.LibraryAddCheck : Icons.Material.Outlined.LibraryAddCheck)" Class="mx-2" OnClick="ToggleSelectable" />
                        </MudTooltip>
                    }
                </MudItem>
                <MudItem xs="12" Class="py-0">
                    @if (MapSort is not null)
                    {
                        <MudChip T="string" OnClose="() => RemoveMapSort()" Class="mb-3">@MapSort?.Name</MudChip>
                    }
                    @foreach (var mapFilter in MapFilters.Where(f => f.Visible))
                    {
                        <MudChip T="string" OnClose="() => RemoveMapFilter(mapFilter)" Class="mb-3">@mapFilter.Name</MudChip>
                    }
                    @if (MapSort is not null || MapFilters.Any(f => f.Visible))
                    {
                        <MudTooltip Text="Remove all filters and sorts">
                            <MudChip T="string" Variant="Variant.Outlined" OnClick="ClearFiltersAndSort" Class="mb-3">
                                <MudIcon Icon="@Icons.Material.Filled.FilterAltOff" Size="Size.Small"></MudIcon>
                            </MudChip>
                        </MudTooltip>
                    }
                </MudItem>
            </MudGrid>
        </ToolBarContent>
        <LoadingContent>
            @if (InitialMapLoad)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Style="position: absolute; top: 0;" />
                <MudIcon Icon="@Icons.Material.Filled.ManageSearch" Style="vertical-align: middle; margin-bottom: 4px;"></MudIcon> @:Loading maps for first use. Depending on the number of maps, this might take a minute.
            }
            else if (TableRef.GetFilteredItemsCount() == 0 && SelectedPlaylist?.IsDynamicPlaylist == true && string.IsNullOrEmpty(SearchString))
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Style="position: absolute; top: 0;" />
                <MudIcon Icon="@Icons.Material.Filled.ManageSearch" Style="vertical-align: middle; margin-bottom: 4px;"></MudIcon> @:Nothing yet. Dynamic playlist is still being generated. Maps will appear once all the maps have been downloaded.
            }
        </LoadingContent>
        <NoRecordsContent>
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Style="vertical-align: middle; margin-bottom: 4px;"></MudIcon>

            @if (RankedMaps)
            {
                @: No recommended ranked maps found with the current criteria. Try lowering the minimum predicted accuracy.
            }
            else
            {
                @: No maps found with the current criteria.
            }
        </NoRecordsContent>
        <Columns>
            @if (RowContent is not null)
            {
                @RowContent(new Core.Models.MapRowContext
               {
                   FilteredMaps = TableRef.FilteredItems,
                   Map = null
               })
            }
        </Columns>
        <PagerContent>
            @if (!RankedMaps && Selectable)
            {
                <MudPaper Elevation="25" Class="bulk-actions-toolbar">
                    <MudToolBar Class="pr-0 border-l-2">
                        <MudChip T="string" Variant="Variant.Outlined">@SelectedMaps.Count maps</MudChip>
                        <MudButton Variant="Variant.Text" Class="px-5 full-height" StartIcon="@Icons.Material.Filled.Close" OnClick="CancelSelectionAsync">
                            Cancel selection
                        </MudButton>
                        <MudDivider Vertical="true" FlexItem="true" />
                        <MudButton Variant="Variant.Text" DisableElevation="true" Class="px-5 full-height" StartIcon="@Icons.Material.Filled.PlaylistAdd" Disabled="!SelectedMaps.Any()" OnClick="AddSelectedMapsToPlaylist">
                            Add to playlist
                        </MudButton>
                        @if (SelectedPlaylist is not null && !SelectedPlaylist.IsDynamicPlaylist)
                        {
                            <MudButton Variant="Variant.Text" DisableElevation="true" Class="px-5 full-height" StartIcon="@Icons.Material.Filled.PlaylistRemove" Disabled="!SelectedMaps.Any()" OnClick="RemoveSelectedMapsFromSelectedPlaylist">
                                Remove from playlist
                            </MudButton>
                        }
                        @if (SelectedPlaylist is null || !SelectedPlaylist.IsDynamicPlaylist)
                        {
                            <MudButton Variant="Variant.Text" Color="Color.Secondary" Class="px-5 full-height" DisableElevation="true" StartIcon="@Icons.Material.Filled.Delete" Disabled="!SelectedMaps.Any()" OnClick="DeleteSelectedMaps">
                                Delete
                            </MudButton>
                        }
                    </MudToolBar>
                </MudPaper>
            }
            <div class="absolute full-height d-flex flex-row align-center px-3" style="height: 60px; z-index: 999">
                @if (DifficultyModifier != 0)
                {
                    var chipColor = DifficultyModifier >= 0 ? Colors.Purple.Darken3 : Colors.Green.Darken3;
                    var chipStyle = $"border: 1px solid {chipColor}";

                    <MudTooltip Text="Difficulty modifier">
                        <MudChip T="string" Variant="Variant.Outlined" Style="@chipStyle">
                            <MudIcon Icon="@Icons.Material.Filled.Speed" Class="mr-2"></MudIcon>
                            @(DifficultyModifier >= 0 ? "+" : string.Empty)@DifficultyModifier%
                        </MudChip>
                    </MudTooltip>
                }
            </div>
            <MudDataGridPager T="Map" />
        </PagerContent>
    </MudDataGrid>
</div>