@using MapMaven.Core.Models;
@using MapMaven.Core.Utilities;
@using MapMaven.Core.Utilities.Scoresaber

<MudDialog>
    <DialogContent>
        <MapCover Map="Map" Class="blurred-background-image" Style="height: 150px; top: -50px" />
        <MudGrid>
            <MudItem xs="4">
                <MapCover Map="Map" />
            </MudItem>
            <MudItem xs="8">
                <MudText Typo="Typo.h4">@Map.Name</MudText>
                <MudText Typo="Typo.subtitle2">By <b>@Map.SongAuthorName</b></MudText>
                <MudText Typo="Typo.subtitle2">Mapped by <b>@Map.MapAuthorName</b></MudText>
                <div class="mt-2">
                    @if (Map.Played)
                    {
                        <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-0">Played</MudChip>
                    }
                    @if (Map.Ranked)
                    {
                        <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-0">Ranked</MudChip>
                    }
                </div>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-4" Style="background-color: var(--mud-palette-drawer-background);">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText><b>Added:</b> @Map.AddedDateTime.ToShortDateString() @Map.AddedDateTime.ToLongTimeString()</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText><b>Duration:</b> @Map.SongDuration.ToString("mm':'ss")</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText><b>Hash:</b> @Map.Hash</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText>
                                <b>Tags:</b>
                                @foreach (var tag in Map.Tags)
                                {
                                    <MudChip Color="Color.Default" Size="Size.Small">@tag</MudChip>
                                }
                            </MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                @foreach (var difficulty in Map.Difficulties.OrderByDescending(m => DifficultyUtils.GetOrder(m.Difficulty)))
                {
                    var tableStyle = $"background-color: var(--mud-palette-drawer-background); border-left: 2px solid {DifficultyDisplayUtils.GetColor(difficulty.Difficulty)}";

                    <MudPaper Class="mb-4" Style="@tableStyle">
                        <MudSimpleTable Dense="true" Class="background-transparent mud-elevation-0">
                            <thead>
                                <tr>
                                    <td colspan="2">
                                        <MudText Typo="Typo.overline">
                                            @DifficultyDisplayUtils.GetDisplayName(difficulty.Difficulty)
                                        </MudText>
                                    </td>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Map.Ranked)
                                {
                                    <tr>
                                        <td><b>Star difficulty</b></td>
                                        <td>@difficulty.Stars</td>
                                    </tr>
                                    <tr>
                                        <td><b>PP</b></td>
                                        <td>@difficulty.MaxPP?.ToString("#0.##")</td>
                                    </tr>
                                }
                                <tr>
                                    <td><b>Note jump speed</b></td>
                                    <td>@* @difficulty.NoteJumpSpeed.ToString("#0.##") *@</td>
                                </tr>

                                @{
                                    var playerScore = Map.AllPlayerScores.FirstOrDefault(s => s.Leaderboard.Difficulty.DifficultyName == difficulty.Difficulty);

                                    if (playerScore != null)
                                    {
                                        <tr>
                                            <td colspan="2">
                                                <MudIcon Icon="@Icons.Material.Filled.Leaderboard" Size="Size.Small"></MudIcon>
                                                <MudText Typo="Typo.overline">Score</MudText>
                                            </td>
                                        </tr>
                                        <tr>
                                            <td><b>Time set</b></td>
                                            <td>@playerScore.Score.TimeSet.LocalDateTime.ToString("G")</td>
                                        </tr>
                                        <tr>
                                            <td><b>Base score</b></td>
                                            <td>@playerScore.Score.BaseScore</td>
                                        </tr>
                                        <tr>
                                            <td><b>Modified score</b></td>
                                            <td>@playerScore.Score.ModifiedScore</td>
                                        </tr>
                                        <tr>
                                            <td><b>Accuracy</b></td>
                                            <td>@playerScore.AccuracyWithMods().ToString("#0.##")%</td>
                                        </tr>
                                        <tr>
                                            <td><b>Rank</b></td>
                                            <td>@playerScore.Score.Rank</td>
                                        </tr>
                                        <tr>
                                            <td><b>Bad cuts</b></td>
                                            <td>@playerScore.Score.BadCuts</td>
                                        </tr>
                                        <tr>
                                            <td><b>Missed notes</b></td>
                                            <td>@playerScore.Score.MissedNotes</td>
                                        </tr>
                                        <tr>
                                            <td><b>Max combo</b></td>
                                            <td>
                                                @playerScore.Score.MaxCombo
                                                @if (playerScore.Score.FullCombo)
                                                {
                                                    <MudChip Color="Color.Primary" Size="Size.Small" Class="ml-2">FC <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" Class="ml-1"></MudIcon></MudChip>
                                                }
                                            </td>
                                        </tr>
                                        @if (Map.Ranked)
                                        {
                                            <tr>
                                                <td><b>PP</b></td>
                                                <td>@playerScore.Score.Pp.ToString("#0.##")</td>
                                            </tr>
                                            <tr>
                                                <td><b>Weighted PP</b></td>
                                                <td>@((playerScore.Score.Pp * playerScore.Score.Weight).ToString("#0.##"))</td>
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </MudSimpleTable>
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
</MudDialog>

@code {
    [Inject]
    private IMapService MapService { get; set; }

    [Inject]
    private IApplicationEventService ApplicationEventService { get; set; }

    [Parameter]
    public Map Map { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Map = await MapService.GetMapDetails(Map);
        }
        catch (Exception ex)
        {
            ApplicationEventService.RaiseError(new ErrorEvent
            {
                Exception = ex,
                Message = "Failed to load map details from BeatSaver."
            });
        }
    }
}