@inherits ReactiveComponent

@using System.Text.Json
@using MapMaven.Core.Utilities.Scoresaber

<TemplateColumn T="Map" Sortable="false" Class="pa-0" CellStyle="width: 50px; position: relative;">
    <CellTemplate>
        <SongPlaybackButton Map="context.Item"></SongPlaybackButton>
    </CellTemplate>
</TemplateColumn>
<TemplateColumn T="Map" Sortable="false" Class="pa-1" CellStyle="width: 50px">
    <CellTemplate>
        <div style="min-width: 50px">
            <MapCover Map="context.Item"></MapCover>
        </div>
    </CellTemplate>
</TemplateColumn>
<PropertyColumn T="Map" TProperty="string" Property="m => m.Name" Title="Name" CellStyle="max-width: 200px; min-width: 200px;"></PropertyColumn>
<SortableTemplateColumn T="Map" TProperty="string" Property="m => m.SongAuthorName" SortBy="m => m.SongAuthorName" Title="Song Author" CellStyle="max-width: 130px; min-width: 130px;">
    <CellTemplate>
        <MudLink @onclick="() => SelectSongAuthor(context.Item)" Color="Color.Default" Typo="Typo.body2">@context.Item.SongAuthorName</MudLink>
    </CellTemplate>
</SortableTemplateColumn>
<PropertyColumn T="Map" TProperty="string" Property="m => m.MapAuthorName" SortBy="m => m.MapAuthorName" Title="Map Author" CellStyle="max-width: 130px; min-width: 130px;"></PropertyColumn>
<SortableTemplateColumn T="Map" TProperty="TimeSpan" CellStyle="max-width: 130px; min-width: 130px" Property="m => m.SongDuration" SortBy="m => m.SongDuration" Title="Duration">
    <CellTemplate>
        @context.Item.SongDuration.ToString("mm':'ss")
    </CellTemplate>
</SortableTemplateColumn>
@if (!string.IsNullOrEmpty(PlayerId))
{
    <SortableTemplateColumn
        T="Map"
        TProperty="double"
        Property="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.AccuracyWithMods()) : 0"
        SortBy="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.AccuracyWithMods()) : 0"
        Title="%"
        CellStyle="max-width: 150px; min-width: 150px;">
        <CellTemplate>
            @foreach (var playerScore in context.Item.AllPlayerScores)
            {
                var chipStyle = $"border: 1px solid {DifficultyDisplayUtils.GetColor(playerScore.Leaderboard?.Difficulty?.DifficultyName)}";
                <MudChip Size="Size.Small" Variant="Variant.Outlined" Style="@chipStyle">
                    @DifficultyDisplayUtils.GetShortName(playerScore.Leaderboard?.Difficulty?.DifficultyName) | @playerScore.AccuracyWithMods().ToString("#0.##")%
                </MudChip>
            }
        </CellTemplate>
    </SortableTemplateColumn>
    <SortableTemplateColumn
        T="Map"
        TProperty="double"
        Property="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.Score.Pp) : 0"
        SortBy="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.Score.Pp) : 0"
        Title="pp"
        CellStyle="max-width: 150px; min-width: 150px;">
        <CellTemplate>
            @foreach (var playerScore in context.Item.AllPlayerScores)
            {
                var chipStyle = $"border: 1px solid {DifficultyDisplayUtils.GetColor(playerScore.Leaderboard?.Difficulty?.DifficultyName)}";
                <MudChip Size="Size.Small" Variant="Variant.Outlined" Style="@chipStyle">
                    @DifficultyDisplayUtils.GetShortName(playerScore.Leaderboard?.Difficulty?.DifficultyName) | @playerScore.Score.Pp.ToString("#0.##") pp
                </MudChip>
            }
        </CellTemplate>
    </SortableTemplateColumn>
    <SortableTemplateColumn
        T="Map"
        TProperty="double"
        Property="m => m.ScoreEstimates.Any() ? m.ScoreEstimates.Max(x => x.PPIncrease) : 0"
        SortBy="m => m.ScoreEstimates.Any() ? m.ScoreEstimates.Max(x => x.PPIncrease) : 0"
        Title="Score estimates"
        CellStyle="max-width: 230px; min-width: 230px;">
        <HeaderTemplate>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Filled.KeyboardDoubleArrowUp"></MudIcon>pp
            </div>
        </HeaderTemplate>
        <CellTemplate>
            @if (context.Item.ScoreEstimates != null)
            {
                @foreach (var scoreEstimate in context.Item.ScoreEstimates.Where(s => s.PPIncrease >= 0.005))
                {
                    var chipStyle = $"border: 1px solid {DifficultyDisplayUtils.GetColor(scoreEstimate.Difficulty)}";
                    <MudChip Size="Size.Small" Variant="Variant.Outlined" Style="@chipStyle">
                        @DifficultyDisplayUtils.GetShortName(scoreEstimate.Difficulty) |
                        @scoreEstimate.Stars <MudIcon Icon="@Icons.Filled.Star" Size="Size.Small"></MudIcon> |
                        @scoreEstimate.Accuracy.ToString("#0.##") % |
                        +@scoreEstimate.PPIncrease.ToString("#0.##") pp
                    </MudChip>
                }
            }
        </CellTemplate>
    </SortableTemplateColumn>
    <SortableTemplateColumn T="Map" TProperty="bool" Property="m => m.HighestPlayerScore.Score.HasReplay" SortBy="m => m.HighestPlayerScore?.Score?.HasReplay">
        <HeaderTemplate>
            <img src="images/replay-icon.png" style="width: 24px; vertical-align: middle;" />
        </HeaderTemplate>
        <CellTemplate>
            @foreach (var playerScore in context.Item.AllPlayerScores.Where(s => s.Score.HasReplay))
            {
                var chipStyle = $"cursor: pointer; border: 1px solid {DifficultyDisplayUtils.GetColor(playerScore.Leaderboard?.Difficulty?.DifficultyName)}";
                <MudButton Class="replay-button pa-0" OnClick="() => OpenReplay(context.Item, playerScore)" Style="min-width: 0; border-radius: 100%;">
                    <MudChip Size="Size.Small" Variant="Variant.Text" Style="@chipStyle">
                        @DifficultyDisplayUtils.GetShortName(playerScore.Leaderboard?.Difficulty?.DifficultyName)
                        <img src="images/replay-icon.png" class="ml-1" style="width: 18px" />
                    </MudChip>
                </MudButton>
            }
        </CellTemplate>
    </SortableTemplateColumn>
}
<TemplateColumn T="Map" Sortable="false" CellStyle="width: 100px">
    <CellTemplate>
        <div style="min-width: 100px">
            <MudIconButton Icon="@Icons.Filled.PlaylistAdd" Variant="Variant.Text" Size="Size.Medium" OnClick="() => OpenAddMapToPlaylistDialog(context.Item)" />
            @if (SelectedPlaylist != null && !SelectedPlaylist.IsDynamicPlaylist)
            {
                <MudIconButton Icon="@Icons.Filled.PlaylistRemove" Variant="Variant.Text" Size="Size.Medium" OnClick="() => OpenDeleteFromPlaylistDialog(context.Item)" />
            }
        </div>
    </CellTemplate>
</TemplateColumn>
