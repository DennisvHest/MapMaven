@inherits ReactiveComponent

@using System.Text.Json
@using MapMaven.Core.Utilities.Scoresaber


<TemplateColumn T="Map" Sortable="false" Resizable="false" ShowColumnOptions="false" HeaderStyle="width:0%; padding: 0;" CellStyle="padding: 0;"
                Filterable="false" IsEditable="false">
    <HeaderTemplate>
        @if (Selectable)
        {
            <MudCheckBox T="bool" Checked="@context.IsAllSelected" CheckedChanged="@context.Actions.SetSelectAllAsync" Class="ma-3" />
        }
    </HeaderTemplate>
    <CellTemplate>
        @if (Selectable)
        {
            <MudCheckBox T="bool" Checked="@context.IsSelected" CheckedChanged="@context.Actions.SetSelectedItemAsync" Class="ma-3" />
        }
    </CellTemplate>
</TemplateColumn>
<TemplateColumn T="Map" Sortable="false" CellClass="pl-0" CellStyle="width: 50px; position: relative;">
    <CellTemplate>
        <div>
            <div class="d-flex flex-column">
                <MudTooltip Text="Play song preview" ShowOnFocus="false">
                    <SongPlaybackButton Map="context.Item"></SongPlaybackButton>
                </MudTooltip>
                <MudTooltip Text="Open map details" ShowOnFocus="false">
                    <MudIconButton Icon="@Icons.Material.Filled.Info" Class="pb-0 pt-1" Variant="Variant.Text" Size="Size.Medium" OnClick="() => OpenDetails(context.Item)" />
                </MudTooltip>
            </div>
        </div>
    </CellTemplate>
</TemplateColumn>
<TemplateColumn T="Map" Sortable="false" Class="pa-1" CellStyle="width: 50px">
    <CellTemplate>
        <div style="min-width: 50px">
            <MapCover Map="context.Item" Size="50"></MapCover>
        </div>
    </CellTemplate>
</TemplateColumn>
<PropertyColumn T="Map" TProperty="string" Property="m => m.Name" Title="Name" CellStyle="max-width: 200px; min-width: 200px;"></PropertyColumn>
<SortableTemplateColumn T="Map" TProperty="string" Property="m => m.SongAuthorName" SortBy="m => m.SongAuthorName" Title="Song Author" CellStyle="max-width: 130px; min-width: 130px;">
    <CellTemplate>
        <MudLink @onclick="() => SelectSongAuthor(context.Item)" Color="Color.Default" Typo="Typo.body2">@context.Item.SongAuthorName</MudLink>
    </CellTemplate>
</SortableTemplateColumn>
<PropertyColumn T="Map" TProperty="string" Property="m => m.MapAuthorName" SortBy="m => m.MapAuthorName" Title="Map Author" CellStyle="max-width: 130px; min-width: 130px;"></PropertyColumn>
<SortableTemplateColumn T="Map" TProperty="TimeSpan" CellStyle="max-width: 130px; min-width: 130px" Property="m => m.SongDuration" SortBy="m => m.SongDuration" Title="Duration">
    <CellTemplate>
        @context.Item.SongDuration.ToString("mm':'ss")
    </CellTemplate>
</SortableTemplateColumn>
<SortableTemplateColumn
    T="Map"
    TProperty="double"
    Property="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.Score.AccuracyWithMods) : 0"
    SortBy="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.Score.AccuracyWithMods) : 0"
    Title="%"
    CellStyle="max-width: 150px; min-width: 150px;"
    Visible="!string.IsNullOrEmpty(PlayerId)">
    <CellTemplate>
        @foreach (var playerScore in context.Item.AllPlayerScores)
        {
            <MudTooltip RootClass="d-flex">
                <ChildContent>
                    @{
                        var chipStyle = $"border: 1px solid {DifficultyDisplayUtils.GetColor(playerScore.Leaderboard?.Difficulty)}";
                    }
                    <MudChip Size="Size.Small" Variant="Variant.Outlined" Style="@chipStyle">
                        @DifficultyDisplayUtils.GetShortName(playerScore.Leaderboard?.Difficulty) | @playerScore.Score.AccuracyWithMods.ToString("#0.##")%
                    </MudChip>
                </ChildContent>
                <TooltipContent>
                    <p style="text-align: left; max-width: 300px;">
                        <b>Accuracy:</b> @playerScore.Score.Accuracy.ToString("#0.##")%<br />
                        <b>Accuracy with modifiers:</b> @playerScore.Score.AccuracyWithMods.ToString("#0.##")%<br />
                        <b>Modifiers:</b> @string.Join(", ", playerScore.Score.Modifiers)
                    </p>
                </TooltipContent>
            </MudTooltip>
        }
    </CellTemplate>
</SortableTemplateColumn>
<SortableTemplateColumn
    T="Map"
    TProperty="double"
    Property="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.Score.Pp) : 0"
    SortBy="m => m.AllPlayerScores.Any() ? m.AllPlayerScores.Max(x => x.Score.Pp) : 0"
    Title="pp"
    CellStyle="max-width: 150px; min-width: 150px;"
    Visible="!string.IsNullOrEmpty(PlayerId)">
    <CellTemplate>
        @foreach (var playerScore in context.Item.AllPlayerScores)
        {
            var chipStyle = $"border: 1px solid {DifficultyDisplayUtils.GetColor(playerScore.Leaderboard?.Difficulty)}";
            <MudChip Size="Size.Small" Variant="Variant.Outlined" Style="@chipStyle">
                @DifficultyDisplayUtils.GetShortName(playerScore.Leaderboard?.Difficulty) | @playerScore.Score.Pp.ToString("#0.##") pp
            </MudChip>
        }
    </CellTemplate>
</SortableTemplateColumn>
<SortableTemplateColumn
    T="Map"
    TProperty="double"
    Property="m => m.ScoreEstimates.Any() ? m.ScoreEstimates.Max(x => x.PPIncrease) : 0"
    SortBy="m => m.ScoreEstimates.Any() ? m.ScoreEstimates.Max(x => x.PPIncrease) : 0"
    Title="Score estimates"
    CellStyle="max-width: 230px; min-width: 230px;"
    Visible="!string.IsNullOrEmpty(PlayerId)">
    <HeaderTemplate>
        <div class="d-flex">
            <MudIcon Icon="@Icons.Filled.KeyboardDoubleArrowUp"></MudIcon>pp
        </div>
    </HeaderTemplate>
    <CellTemplate>
        @if (context.Item.ScoreEstimates != null)
        {
            @foreach (var scoreEstimate in context.Item.ScoreEstimates.Where(s => s.PPIncrease >= 0.005))
            {
                <MudTooltip RootClass="d-flex">
                    <ChildContent>
                        @{
                            var chipStyle = $"border: 1px solid {DifficultyDisplayUtils.GetColor(scoreEstimate.Difficulty)}";
                        }
                        <MudChip Size="Size.Small" Variant="Variant.Outlined" Style="@chipStyle">
                            @DifficultyDisplayUtils.GetShortName(scoreEstimate.Difficulty) |
                            @scoreEstimate.Stars.ToString("#0.##") <MudIcon Icon="@Icons.Filled.Star" Size="Size.Small"></MudIcon> |
                            @scoreEstimate.Accuracy.ToString("#0.##") % |
                            +@scoreEstimate.PPIncrease.ToString("#0.##") pp
                        </MudChip>
                    </ChildContent>
                    <TooltipContent>
                        <p style="text-align: left; max-width: 300px;">
                            <b>Difficulty:</b> @DifficultyDisplayUtils.GetDisplayName(scoreEstimate.Difficulty)<br />
                            <b>Stars:</b> @scoreEstimate.Stars.ToString("#0.##")<br />
                            <b>Estimated accuracy:</b> @scoreEstimate.Accuracy.ToString("#0.##")%<br />
                            <b>Estimated PP increase:</b> +@scoreEstimate.PPIncrease.ToString("#0.##") pp
                        </p>
                    </TooltipContent>
                </MudTooltip>
            }
        }
    </CellTemplate>
</SortableTemplateColumn>
<SortableTemplateColumn T="Map" TProperty="bool" Property="m => m.HighestPlayerScore.Score.HasReplay" SortBy="m => m.HighestPlayerScore?.Score?.HasReplay" Visible="!string.IsNullOrEmpty(PlayerId)">
    <HeaderTemplate>
        <img src="images/replay-icon.png" style="width: 24px; vertical-align: middle;" />
    </HeaderTemplate>
    <CellTemplate>
        @foreach (var playerScore in context.Item.AllPlayerScores.Where(s => s.Score.HasReplay))
        {
            var chipStyle = $"cursor: pointer; border: 1px solid {DifficultyDisplayUtils.GetColor(playerScore.Leaderboard?.Difficulty)}";
            <MudButton Class="replay-button pa-0" OnClick="() => OpenReplay(context.Item, playerScore)" Style="min-width: 0; border-radius: 100%;">
                <MudChip Size="Size.Small" Variant="Variant.Text" Style="@chipStyle">
                    @DifficultyDisplayUtils.GetShortName(playerScore.Leaderboard?.Difficulty)
                    <img src="images/replay-icon.png" class="ml-1" style="width: 18px" />
                </MudChip>
            </MudButton>
        }
    </CellTemplate>
</SortableTemplateColumn>
<TemplateColumn T="Map" Sortable="false" CellStyle="width: 100px">
    <CellTemplate>
        <div class="d-flex" style="min-width: 100px">
            <MudTooltip Text="Add map to playlist" ShowOnFocus="false">
                <MudIconButton Icon="@Icons.Filled.PlaylistAdd" Variant="Variant.Text" Size="Size.Medium" OnClick="() => OpenAddMapToPlaylistDialog(context.Item)" />
            </MudTooltip>
            @if (SelectedPlaylist != null && !SelectedPlaylist.IsDynamicPlaylist)
            {
                <MudTooltip Text="Remove map from playlist" ShowOnFocus="false">
                    <MudIconButton Icon="@Icons.Filled.PlaylistRemove" Variant="Variant.Text" Size="Size.Medium" OnClick="() => OpenDeleteFromPlaylistDialog(context.Item)" />
                </MudTooltip>
            }
            @if (SelectedPlaylist == null || !SelectedPlaylist.IsDynamicPlaylist)
            {
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem OnClick="() => DeleteMap(context.Item)">
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="mr-1" /> Delete map
                        </div>
                    </MudMenuItem>
                </MudMenu>
            }
        </div>
    </CellTemplate>
</TemplateColumn>
