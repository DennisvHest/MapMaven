@using MapMaven.Core.Models.Data.Playlists
@using MapMaven.Core.Models.DynamicPlaylists

@foreach (var item in Folder.ChildItems)
{
    @if (item is PlaylistFolder<Playlist> playlistFolder)
    {
        <MudTreeViewItem T="Playlist" Expanded="Expanded">
            <BodyContent>
                <div class="d-flex align-center justify-space-between full-width">
                    <span>@playlistFolder.FolderName</span>
                    <div>
                        <MudMenu Icon="@Icons.Material.Filled.Add" Size="Size.Small">
                            <MudMenuItem Icon="@Icons.Material.Filled.PlaylistAdd" OnClick="() => OpenAddPlaylistDialog(playlistFolder)">Add playlist</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.PlaylistAdd" OnClick="() => OpenAddDynamicPlaylistDialog(playlistFolder)">Add dynamic playlist</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="() => OpenAddPlaylistFolderDialog(playlistFolder)">Add playlist folder</MudMenuItem>
                        </MudMenu>
                    </div>
                </div>
            </BodyContent>
            <ChildContent>
                <PlaylistTreeViewFolder Folder="playlistFolder" Expanded="Expanded"></PlaylistTreeViewFolder>
            </ChildContent>
        </MudTreeViewItem>
    }

    @if (item is PlaylistTreeNode<Playlist> playlistNode)
    {
        <MudTreeViewItem Value="playlistNode.Playlist" Class="not-expandable" CanExpand="false">
            <BodyContent>
                <div class="playlist-list-item">
                    <PlaylistCover Playlist="playlistNode.Playlist" Class="ml-3 mr-3" Style="width: 30px"></PlaylistCover>
                    <span>@playlistNode.Playlist.Title</span>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Class="ml-auto">
                        <MudMenuItem OnClick="() => OpenEditPlaylistDialog(playlistNode.Playlist)">
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="mr-1" /> Edit
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick="() => OpenDeletePlaylistDialog(playlistNode.Playlist)">
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="mr-1" /> Delete
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </div>
            </BodyContent>
        </MudTreeViewItem>
    }
}

<MudDialog @bind-Visible="DeleteDialogVisible" Options="new() { BackdropClick = false }">
    <DialogContent>
        <MudText Typo="Typo.body1" Class="mb-3">Are you sure you want to delete the "@PlaylistToDelete.Title" playlist?</MudText>
    </DialogContent>
    <DialogActions>
        @{
            var deleteMapsLabel = $"Also delete all {GetLoadedMapsCount(PlaylistToDelete)} maps from the game";
        }
        <MudCheckBox @bind-Value="DeleteMaps" Label="@deleteMapsLabel" Class="mr-10" Style="opacity: 0.8;"></MudCheckBox>
        <MudButton OnClick="ClosePlaylistDelete">Cancel</MudButton>
        <MudButton Color="@Color.Error" Variant="Variant.Filled" OnClick="DeletePlaylist">
            @if (DeletingPlaylist)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="color: white;" />
            }
            else
            {
                @:Delete
            }
        </MudButton>
    </DialogActions>
</MudDialog>
