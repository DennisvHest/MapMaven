@using MapMaven.Core.Models.Data.Playlists
@using MapMaven.Core.Models.DynamicPlaylists

@foreach (var item in Folder.ChildItems)
{
    @if (item is PlaylistFolder<Playlist> playlistFolder)
    {
        <MudTreeViewItem T="Playlist" Icon="@Icons.Material.Filled.Folder" Text="@playlistFolder.FolderName">
            <PlaylistTreeViewFolder Folder="playlistFolder"></PlaylistTreeViewFolder>
        </MudTreeViewItem>
    }

    @if (item is PlaylistTreeNode<Playlist> playlistNode)
    {
        <MudTreeViewItem Value="playlistNode.Playlist" Class="not-expandable" CanExpand="false">
            <BodyContent>
                <div class="playlist-list-item">
                    <PlaylistCover Playlist="playlistNode.Playlist" Small="true" Class="ml-3 mr-3" Style="width: 30px"></PlaylistCover>
                    <span>@playlistNode.Playlist.Title</span>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Class="ml-auto">
                        <MudMenuItem OnClick="() => OpenEditPlaylistDialog(playlistNode.Playlist)">
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Class="mr-1" /> Edit
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick="() => OpenDeletePlaylistDialog(playlistNode.Playlist)">
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Class="mr-1" /> Delete
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </div>
            </BodyContent>
        </MudTreeViewItem>
    }
}

<MudDialog @bind-Visible="DeleteDialogVisible" Options="new() { BackdropClick = false }">
    <DialogContent>
        <MudText Typo="Typo.body1" Class="mb-3">Are you sure you want to delete the "@PlaylistToDelete.Title" playlist?</MudText>
    </DialogContent>
    <DialogActions>
        @{
            var deleteMapsLabel = $"Also delete all {GetLoadedMapsCount(PlaylistToDelete)} maps from the game";
        }
        <MudCheckBox @bind-Value="DeleteMaps" Label="@deleteMapsLabel" Class="mr-10" Style="opacity: 0.8;"></MudCheckBox>
        <MudButton OnClick="ClosePlaylistDelete">Cancel</MudButton>
        <MudButton Color="@Color.Error" Variant="Variant.Filled" OnClick="DeletePlaylist">
            @if (DeletingPlaylist)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="color: white;" />
            }
            else
            {
                @:Delete
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    IDialogService DialogService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    IPlaylistService PlaylistService { get; set; }

    [Inject]
    IBeatSaberDataService BeatSaberDataService { get; set; }

    [Parameter]
    public PlaylistFolder<Playlist> Folder { get; set; }

    Playlist? PlaylistToDelete = null;
    bool DeleteDialogVisible = false;
    bool DeletingPlaylist = false;
    bool DeleteMaps = false;

    void OpenEditPlaylistDialog(Playlist playlist)
    {
        var parameters = new DialogParameters
        {
            { "EditPlaylistModel", new EditPlaylistModel(playlist) }
        };

        DialogService.Show<EditPlaylistDialog>("Edit playlist", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });
    }

    void OpenDeletePlaylistDialog(Playlist playlistToDelete)
    {
        PlaylistToDelete = playlistToDelete;
        DeleteDialogVisible = true;
    }

    void ClosePlaylistDelete()
    {
        PlaylistToDelete = null;
        DeleteDialogVisible = false;
        DeleteMaps = false;
    }

    async Task DeletePlaylist()
    {
        DeletingPlaylist = true;

        try
        {
            await PlaylistService.DeletePlaylist(PlaylistToDelete, DeleteMaps);

            Snackbar.Add($"Removed playlist \"{PlaylistToDelete.Title}\"", Severity.Normal, config => config.Icon = Icons.Material.Filled.Check);

            ClosePlaylistDelete();
        }
        finally
        {
            DeletingPlaylist = false;
        }
    }

    int GetLoadedMapsCount(Playlist playlist)
    {
        return playlist.Maps
            .Where(m => BeatSaberDataService.MapIsLoaded(m.Hash))
            .Count();
    }
}

