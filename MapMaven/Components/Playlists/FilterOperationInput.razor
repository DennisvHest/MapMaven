@using MapMaven.Core.Models.DynamicPlaylists;
@using MapMaven.Core.Models.DynamicPlaylists.MapInfo;
@using MapMaven.Core.Utilities;

<div class="d-flex align-items-center">
    <MudSelect T="DynamicPlaylistFieldOption" Value="SelectedFieldOption" Text="@(SelectedFieldOption?.Name)" Label="Field" ValueChanged="OnFieldChanged" Variant="Variant.Outlined">
        @foreach (var field in FieldOptions)
        {
            <MudSelectItem Value="field" >
                @field.Name
            </MudSelectItem>
        }
    </MudSelect>
    @if (SelectedFieldOption?.Type != typeof(bool))
    {
        <MudSelect @bind-Value="FilterOperation.Operator" Label="Operator" Variant="Variant.Outlined">
            @foreach (var filterOperator in Enum.GetValues<MapMaven.Core.Models.DynamicPlaylists.FilterOperator>())
            {
                <MudSelectItem Value="filterOperator">
                    @filterOperator.ToString()
                </MudSelectItem>
            }
        </MudSelect>
    }
    @switch (SelectedFieldOption?.Type)
    {
        case Type type when type == typeof(string):
            <MudTextField @bind-Value="FilterOperation.Value" Label="Value" Variant="Variant.Outlined" />
            break;
        case Type type when Numeric.Is(type):
            <MudNumericField @bind-Value="FilterOperation.Value" Label="Value" Variant="Variant.Outlined" />
            break;
        case Type type when type == typeof(bool):
            <MudSwitch T="bool" Checked="@(bool.TryParse(FilterOperation.Value, out var boolValue) ? boolValue : false)" CheckedChanged="BooleanValueChanged" Color="Color.Primary" />
            break;
        case Type type when type == typeof(DateTime):
            <MudDatePicker @bind-Value="FilterOperation.Value" Label="Value" Variant="Variant.Outlined" />
            break;
        default:
            <MudTextField @bind-Value="FilterOperation.Value" Label="Value" Variant="Variant.Outlined" />
            break;
    }
</div>

@code {
    [Parameter]
    public FilterOperation FilterOperation { get; set; }

    DynamicPlaylistFieldOption SelectedFieldOption { get; set; }

    IEnumerable<DynamicPlaylistFieldOption> FieldOptions => GetFieldOptionsForType(typeof(DynamicPlaylistMap));

    private IEnumerable<DynamicPlaylistFieldOption> GetFieldOptionsForType(Type type, string? parentObjectName = null)
    {
        return type
            .GetProperties()
            .SelectMany(property =>
            {
                if (property.PropertyType.IsClass && property.PropertyType != typeof(string))
                    return GetFieldOptionsForType(property.PropertyType, parentObjectName: property.Name);

                var value = parentObjectName != null ? $"{parentObjectName}.{property.Name}" : property.Name;
                var name = parentObjectName != null ? $"{property.Name} ({parentObjectName})" : property.Name;

                return new[] {
                        new DynamicPlaylistFieldOption
                        {
                            Value = value,
                            Name = name,
                            Type = property.PropertyType
                        }
                };
            });
    }

    void OnFieldChanged(DynamicPlaylistFieldOption selectedField)
    {
        SelectedFieldOption = selectedField;
        FilterOperation.Field = SelectedFieldOption.Value;
        FilterOperation.Value = null;

        if (SelectedFieldOption.Type == typeof(bool))
        {
            FilterOperation.Operator = MapMaven.Core.Models.DynamicPlaylists.FilterOperator.Equals;
            BooleanValueChanged(false);
        }
    }

    void BooleanValueChanged(bool value)
    {
        FilterOperation.Value = value.ToString();
    }
}
