// <auto-generated />
using System;
using MapMaven.DataGatherers.ScoreSaber.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapMaven.DataGatherers.ScoreSaber.Data.Migrations
{
    [DbContext(typeof(ScoreSaberScoresContext))]
    partial class ScoreSaberScoresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Difficulty1")
                        .HasColumnType("float");

                    b.Property<string>("DifficultyRaw")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LeaderboardId")
                        .HasColumnType("float");

                    b.Property<double?>("LeaderboardInfoId")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardInfoId");

                    b.ToTable("Difficulty");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.LeaderboardInfo", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("float");

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("DailyPlays")
                        .HasColumnType("float");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("int");

                    b.Property<string>("LevelAuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Loved")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LovedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("MaxPP")
                        .HasColumnType("float");

                    b.Property<double>("MaxScore")
                        .HasColumnType("float");

                    b.Property<double>("Plays")
                        .HasColumnType("float");

                    b.Property<bool>("PositiveModifiers")
                        .HasColumnType("bit");

                    b.Property<bool>("Qualified")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("QualifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("Ranked")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("RankedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SongAuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SongSubName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Stars")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.ToTable("Leaderboards");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Banned")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CountryRank")
                        .HasColumnType("float");

                    b.Property<string>("Histories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Permissions")
                        .HasColumnType("float");

                    b.Property<double>("Pp")
                        .HasColumnType("float");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rank")
                        .HasColumnType("float");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.PlayerScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("LeaderboardId")
                        .HasColumnType("float");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ScoreId")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ScoreId");

                    b.ToTable("PlayerScores");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.Score", b =>
                {
                    b.Property<double>("Id")
                        .HasColumnType("float");

                    b.Property<double>("BadCuts")
                        .HasColumnType("float");

                    b.Property<double>("BaseScore")
                        .HasColumnType("float");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<bool>("HasReplay")
                        .HasColumnType("bit");

                    b.Property<double>("Hmd")
                        .HasColumnType("float");

                    b.Property<double>("MaxCombo")
                        .HasColumnType("float");

                    b.Property<double>("MissedNotes")
                        .HasColumnType("float");

                    b.Property<double>("ModifiedScore")
                        .HasColumnType("float");

                    b.Property<string>("Modifiers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<double>("Pp")
                        .HasColumnType("float");

                    b.Property<double>("Rank")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("TimeSet")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.Difficulty", b =>
                {
                    b.HasOne("MapMaven.DataGatherers.ScoreSaber.LeaderboardInfo", null)
                        .WithMany("Difficulties")
                        .HasForeignKey("LeaderboardInfoId");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.LeaderboardInfo", b =>
                {
                    b.HasOne("MapMaven.DataGatherers.ScoreSaber.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.Player", b =>
                {
                    b.OwnsOne("MapMaven.DataGatherers.ScoreSaber.ScoreStats", "ScoreStats", b1 =>
                        {
                            b1.Property<string>("PlayerId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("AverageRankedAccuracy")
                                .HasColumnType("float")
                                .HasColumnName("AverageRankedAccuracy");

                            b1.Property<double>("RankedPlayCount")
                                .HasColumnType("float")
                                .HasColumnName("RankedPlayCount");

                            b1.Property<double>("ReplaysWatched")
                                .HasColumnType("float")
                                .HasColumnName("ReplaysWatched");

                            b1.Property<double>("TotalPlayCount")
                                .HasColumnType("float")
                                .HasColumnName("TotalPlayCount");

                            b1.Property<double>("TotalRankedScore")
                                .HasColumnType("float")
                                .HasColumnName("TotalRankedScore");

                            b1.Property<double>("TotalScore")
                                .HasColumnType("float")
                                .HasColumnName("TotalScore");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("ScoreStats")
                        .IsRequired();
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.PlayerScore", b =>
                {
                    b.HasOne("MapMaven.DataGatherers.ScoreSaber.LeaderboardInfo", "Leaderboard")
                        .WithMany()
                        .HasForeignKey("LeaderboardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MapMaven.DataGatherers.ScoreSaber.Player", null)
                        .WithMany("PlayerScores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MapMaven.DataGatherers.ScoreSaber.Score", "Score")
                        .WithMany()
                        .HasForeignKey("ScoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Leaderboard");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.LeaderboardInfo", b =>
                {
                    b.Navigation("Difficulties");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.ScoreSaber.Player", b =>
                {
                    b.Navigation("PlayerScores");
                });
#pragma warning restore 612, 618
        }
    }
}
