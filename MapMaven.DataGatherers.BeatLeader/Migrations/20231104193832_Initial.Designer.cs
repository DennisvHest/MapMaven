// <auto-generated />
using System;
using MapMaven.DataGatherers.BeatLeader.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MapMaven.DataGatherers.BeatLeader.Migrations
{
    [DbContext(typeof(BeatLeaderScoresContext))]
    [Migration("20231104193832_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.LeaderboardResponse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ClanRankingContested")
                        .HasColumnType("bit");

                    b.Property<int>("Plays")
                        .HasColumnType("int");

                    b.Property<string>("SongId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("Leaderboards", (string)null);
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.PlayerResponseWithStats", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("AccPp")
                        .HasColumnType("real");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bot")
                        .HasColumnType("bit");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryRank")
                        .HasColumnType("int");

                    b.Property<int>("LastWeekCountryRank")
                        .HasColumnType("int");

                    b.Property<float>("LastWeekPp")
                        .HasColumnType("real");

                    b.Property<int>("LastWeekRank")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PassPp")
                        .HasColumnType("real");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("TechPp")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.ScoreResponseWithMyScore", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float>("AccLeft")
                        .HasColumnType("real");

                    b.Property<float>("AccPP")
                        .HasColumnType("real");

                    b.Property<float>("AccRight")
                        .HasColumnType("real");

                    b.Property<float>("Accuracy")
                        .HasColumnType("real");

                    b.Property<int>("BadCuts")
                        .HasColumnType("int");

                    b.Property<int>("BaseScore")
                        .HasColumnType("int");

                    b.Property<int>("BombCuts")
                        .HasColumnType("int");

                    b.Property<float>("BonusPp")
                        .HasColumnType("real");

                    b.Property<int>("Controller")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FcAccuracy")
                        .HasColumnType("real");

                    b.Property<float>("FcPp")
                        .HasColumnType("real");

                    b.Property<bool>("FullCombo")
                        .HasColumnType("bit");

                    b.Property<int>("Hmd")
                        .HasColumnType("int");

                    b.Property<string>("LeaderboardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("int");

                    b.Property<int?>("MaxStreak")
                        .HasColumnType("int");

                    b.Property<int>("MissedNotes")
                        .HasColumnType("int");

                    b.Property<int>("ModifiedScore")
                        .HasColumnType("int");

                    b.Property<string>("Modifiers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PassPP")
                        .HasColumnType("real");

                    b.Property<int>("Pauses")
                        .HasColumnType("int");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayCount")
                        .HasColumnType("int");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Pp")
                        .HasColumnType("real");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Replay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReplaysWatched")
                        .HasColumnType("int");

                    b.Property<float>("TechPP")
                        .HasColumnType("real");

                    b.Property<int>("Timepost")
                        .HasColumnType("int");

                    b.Property<string>("Timeset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WallsHit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("LeaderboardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Scores", (string)null);
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.Song", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Bpm")
                        .HasColumnType("float");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownloadUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("FullCoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mapper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MapperId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UploadTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Songs", (string)null);
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.LeaderboardResponse", b =>
                {
                    b.HasOne("MapMaven.DataGatherers.BeatLeader.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MapMaven.DataGatherers.BeatLeader.DifficultyResponse", "Difficulty", b1 =>
                        {
                            b1.Property<string>("LeaderboardResponseId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<float?>("AccRating")
                                .HasColumnType("real");

                            b1.Property<int>("Bombs")
                                .HasColumnType("int");

                            b1.Property<string>("DifficultyName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Duration")
                                .HasColumnType("float");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("MaxScore")
                                .HasColumnType("int");

                            b1.Property<int>("Mode")
                                .HasColumnType("int");

                            b1.Property<string>("ModeName")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<float>("Njs")
                                .HasColumnType("real");

                            b1.Property<int>("NominatedTime")
                                .HasColumnType("int");

                            b1.Property<int>("Notes")
                                .HasColumnType("int");

                            b1.Property<float>("Nps")
                                .HasColumnType("real");

                            b1.Property<float?>("PassRating")
                                .HasColumnType("real");

                            b1.Property<float?>("PredictedAcc")
                                .HasColumnType("real");

                            b1.Property<int>("QualifiedTime")
                                .HasColumnType("int");

                            b1.Property<int>("RankedTime")
                                .HasColumnType("int");

                            b1.Property<int>("Requirements")
                                .HasColumnType("int");

                            b1.Property<float?>("Stars")
                                .HasColumnType("real");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<float?>("TechRating")
                                .HasColumnType("real");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.Property<int>("Walls")
                                .HasColumnType("int");

                            b1.HasKey("LeaderboardResponseId");

                            b1.ToTable("Leaderboards");

                            b1.WithOwner()
                                .HasForeignKey("LeaderboardResponseId");

                            b1.OwnsOne("MapMaven.DataGatherers.BeatLeader.ModifiersMap", "ModifierValues", b2 =>
                                {
                                    b2.Property<string>("DifficultyResponseLeaderboardResponseId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("Da")
                                        .HasColumnType("real");

                                    b2.Property<float>("Fs")
                                        .HasColumnType("real");

                                    b2.Property<float>("Gn")
                                        .HasColumnType("real");

                                    b2.Property<int>("ModifierId")
                                        .HasColumnType("int");

                                    b2.Property<float>("Na")
                                        .HasColumnType("real");

                                    b2.Property<float>("Nb")
                                        .HasColumnType("real");

                                    b2.Property<float>("Nf")
                                        .HasColumnType("real");

                                    b2.Property<float>("No")
                                        .HasColumnType("real");

                                    b2.Property<float>("Op")
                                        .HasColumnType("real");

                                    b2.Property<float>("Pm")
                                        .HasColumnType("real");

                                    b2.Property<float>("Sa")
                                        .HasColumnType("real");

                                    b2.Property<float>("Sc")
                                        .HasColumnType("real");

                                    b2.Property<float>("Sf")
                                        .HasColumnType("real");

                                    b2.Property<float>("Ss")
                                        .HasColumnType("real");

                                    b2.HasKey("DifficultyResponseLeaderboardResponseId");

                                    b2.ToTable("Leaderboards");

                                    b2.WithOwner()
                                        .HasForeignKey("DifficultyResponseLeaderboardResponseId");
                                });

                            b1.OwnsOne("MapMaven.DataGatherers.BeatLeader.ModifiersRating", "ModifiersRating", b2 =>
                                {
                                    b2.Property<string>("DifficultyResponseLeaderboardResponseId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<float>("FsAccRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("FsPassRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("FsPredictedAcc")
                                        .HasColumnType("real");

                                    b2.Property<float>("FsStars")
                                        .HasColumnType("real");

                                    b2.Property<float>("FsTechRating")
                                        .HasColumnType("real");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int");

                                    b2.Property<float>("SfAccRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("SfPassRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("SfPredictedAcc")
                                        .HasColumnType("real");

                                    b2.Property<float>("SfStars")
                                        .HasColumnType("real");

                                    b2.Property<float>("SfTechRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("SsAccRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("SsPassRating")
                                        .HasColumnType("real");

                                    b2.Property<float>("SsPredictedAcc")
                                        .HasColumnType("real");

                                    b2.Property<float>("SsStars")
                                        .HasColumnType("real");

                                    b2.Property<float>("SsTechRating")
                                        .HasColumnType("real");

                                    b2.HasKey("DifficultyResponseLeaderboardResponseId");

                                    b2.ToTable("Leaderboards");

                                    b2.WithOwner()
                                        .HasForeignKey("DifficultyResponseLeaderboardResponseId");
                                });

                            b1.Navigation("ModifierValues");

                            b1.Navigation("ModifiersRating");
                        });

                    b.Navigation("Difficulty");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.PlayerResponseWithStats", b =>
                {
                    b.OwnsOne("MapMaven.DataGatherers.BeatLeader.PlayerScoreStats", "ScoreStats", b1 =>
                        {
                            b1.Property<string>("PlayerResponseWithStatsId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("APlays")
                                .HasColumnType("int");

                            b1.Property<int>("AnonimusReplayWatched")
                                .HasColumnType("int");

                            b1.Property<int>("AuthorizedReplayWatched")
                                .HasColumnType("int");

                            b1.Property<float>("AverageAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("AverageLeftTiming")
                                .HasColumnType("real");

                            b1.Property<float>("AverageRank")
                                .HasColumnType("real");

                            b1.Property<float>("AverageRankedAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("AverageRankedRank")
                                .HasColumnType("real");

                            b1.Property<float>("AverageRightTiming")
                                .HasColumnType("real");

                            b1.Property<float>("AverageUnrankedAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("AverageUnrankedRank")
                                .HasColumnType("real");

                            b1.Property<float>("AverageWeightedRankedAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("AverageWeightedRankedRank")
                                .HasColumnType("real");

                            b1.Property<int>("DailyImprovements")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("LastRankedScoreTime")
                                .HasColumnType("int");

                            b1.Property<int>("LastScoreTime")
                                .HasColumnType("int");

                            b1.Property<int>("LastUnrankedScoreTime")
                                .HasColumnType("int");

                            b1.Property<int>("MaxStreak")
                                .HasColumnType("int");

                            b1.Property<float>("MedianAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("MedianRankedAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("PeakRank")
                                .HasColumnType("real");

                            b1.Property<int>("RankedImprovementsCount")
                                .HasColumnType("int");

                            b1.Property<int>("RankedMaxStreak")
                                .HasColumnType("int");

                            b1.Property<int>("RankedPlayCount")
                                .HasColumnType("int");

                            b1.Property<int>("RankedTop1Count")
                                .HasColumnType("int");

                            b1.Property<int>("RankedTop1Score")
                                .HasColumnType("int");

                            b1.Property<int>("SPlays")
                                .HasColumnType("int");

                            b1.Property<int>("SpPlays")
                                .HasColumnType("int");

                            b1.Property<int>("SsPlays")
                                .HasColumnType("int");

                            b1.Property<int>("SspPlays")
                                .HasColumnType("int");

                            b1.Property<int>("Top1Count")
                                .HasColumnType("int");

                            b1.Property<int>("Top1Score")
                                .HasColumnType("int");

                            b1.Property<float>("TopAccPP")
                                .HasColumnType("real");

                            b1.Property<float>("TopAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("TopBonusPP")
                                .HasColumnType("real");

                            b1.Property<int>("TopHMD")
                                .HasColumnType("int");

                            b1.Property<float>("TopPassPP")
                                .HasColumnType("real");

                            b1.Property<string>("TopPlatform")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<float>("TopPp")
                                .HasColumnType("real");

                            b1.Property<float>("TopRankedAccuracy")
                                .HasColumnType("real");

                            b1.Property<float>("TopTechPP")
                                .HasColumnType("real");

                            b1.Property<float>("TopUnrankedAccuracy")
                                .HasColumnType("real");

                            b1.Property<int>("TotalImprovementsCount")
                                .HasColumnType("int");

                            b1.Property<int>("TotalPlayCount")
                                .HasColumnType("int");

                            b1.Property<long>("TotalRankedScore")
                                .HasColumnType("bigint");

                            b1.Property<long>("TotalScore")
                                .HasColumnType("bigint");

                            b1.Property<long>("TotalUnrankedScore")
                                .HasColumnType("bigint");

                            b1.Property<int>("UnrankedImprovementsCount")
                                .HasColumnType("int");

                            b1.Property<int>("UnrankedMaxStreak")
                                .HasColumnType("int");

                            b1.Property<int>("UnrankedPlayCount")
                                .HasColumnType("int");

                            b1.Property<int>("UnrankedTop1Count")
                                .HasColumnType("int");

                            b1.Property<int>("UnrankedTop1Score")
                                .HasColumnType("int");

                            b1.Property<int>("WatchedReplays")
                                .HasColumnType("int");

                            b1.HasKey("PlayerResponseWithStatsId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerResponseWithStatsId");
                        });

                    b.Navigation("ScoreStats");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.ScoreResponseWithMyScore", b =>
                {
                    b.HasOne("MapMaven.DataGatherers.BeatLeader.LeaderboardResponse", "Leaderboard")
                        .WithMany()
                        .HasForeignKey("LeaderboardId");

                    b.HasOne("MapMaven.DataGatherers.BeatLeader.PlayerResponseWithStats", "PlayerEntity")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId");

                    b.Navigation("Leaderboard");

                    b.Navigation("PlayerEntity");
                });

            modelBuilder.Entity("MapMaven.DataGatherers.BeatLeader.PlayerResponseWithStats", b =>
                {
                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
